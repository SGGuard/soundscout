import os
import yt_dlp
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º .env ---
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
YOUTUBE_API_KEY = os.getenv("YOUTUBE_API_KEY")

# --- –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –Ω–∞ YouTube ---
def search_youtube(query):
    url = "https://www.googleapis.com/youtube/v3/search"
    params = {
        "part": "snippet",
        "q": query,
        "key": YOUTUBE_API_KEY,
        "maxResults": 1,
        "type": "video"
    }

    response = requests.get(url, params=params)
    data = response.json()

    if "items" not in data or not data["items"]:
        return None

    item = data["items"][0]
    video_id = item["id"]["videoId"]
    title = item["snippet"]["title"]
    link = f"https://www.youtube.com/watch?v={video_id}"

    return {"title": title, "link": link}

# --- –ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ ---
def download_audio(url, output_dir="downloads"):
    os.makedirs(output_dir, exist_ok=True)
    output_path = os.path.join(output_dir, "%(title)s.%(ext)s")

    strategies = [
        # 1Ô∏è‚É£ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±
        {
            "format": "bestaudio/best",
            "outtmpl": output_path,
            "quiet": True,
            "noprogress": True,
            "postprocessors": [{
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }],
        },
        # 2Ô∏è‚É£ webmusic client (–æ–±—Ö–æ–¥ SABR)
        {
            "format": "bestaudio/best",
            "outtmpl": output_path,
            "quiet": True,
            "noprogress": True,
            "http_headers": {"User-Agent": "Mozilla/5.0 (Music YouTube Client)"},
            "extractor_args": {"youtube": {"player_client": ["webmusic"]}},
            "postprocessors": [{
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }],
        },
        # 3Ô∏è‚É£ fallback —Å generic extractor (–Ω–∞ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π)
        {
            "format": "bestaudio/best",
            "outtmpl": output_path,
            "quiet": True,
            "noprogress": True,
            "geo_bypass": True,
            "force_generic_extractor": True,
            "postprocessors": [{
                "key": "FFmpegExtractAudio",
                "preferredcodec": "mp3",
                "preferredquality": "192",
            }],
        }
    ]

    for opts in strategies:
        try:
            with yt_dlp.YoutubeDL(opts) as ydl:
                info = ydl.extract_info(url, download=True)
                filename = ydl.prepare_filename(info)
                base, _ = os.path.splitext(filename)
                mp3_path = f"{base}.mp3"
                if os.path.exists(mp3_path):
                    return mp3_path
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    return None

# --- Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéß –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ ‚Äî —è –Ω–∞–π–¥—É –∏ —Å–∫–∞—á–∞—é –µ—ë –¥–ª—è —Ç–µ–±—è!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    if not query:
        await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞.")
        return

    await update.message.reply_text("üîé –ò—â—É —Ç—Ä–µ–∫...")

    video = search_youtube(query)
    if not video:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ –Ω–∞ YouTube.")
        return

    await update.message.reply_text(f"üé∂ –ù–∞—à—ë–ª: {video['title']}\n‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ...")

    audio_file = download_audio(video["link"])
    if not audio_file or not os.path.exists(audio_file):
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —ç—Ç–æ—Ç —Ç—Ä–µ–∫. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        return

    try:
        await update.message.reply_audio(audio=open(audio_file, "rb"), title=video["title"])
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
    finally:
        if os.path.exists(audio_file):
            os.remove(audio_file)

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ .env")
        return

    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ SoundScout –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã...")
    app.run_polling()

if __name__ == "__main__":
    main()
