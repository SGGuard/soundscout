import os
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
YOUTUBE_API_KEY = os.getenv("YOUTUBE_API_KEY")

# --- –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –Ω–∞ YouTube ---
def search_youtube(query):
    url = "https://www.googleapis.com/youtube/v3/search"
    params = {
        "part": "snippet",
        "q": query,
        "key": YOUTUBE_API_KEY,
        "maxResults": 3,
        "type": "video"
    }

    response = requests.get(url, params=params)
    data = response.json()

    if "items" not in data:
        return None

    results = []
    for item in data["items"]:
        video_id = item["id"]["videoId"]
        title = item["snippet"]["title"]
        link = f"https://www.youtube.com/watch?v={video_id}"
        results.append(f"{title}\n{link}")

    return results if results else None


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø SoundScout –±–æ—Ç. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ ‚Äî —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –µ—ë –Ω–∞ YouTube!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    results = search_youtube(query)

    if not results:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å YouTube ‚Äî –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    else:
        reply = "\n\n".join(results)
        await update.message.reply_text(f"üéµ –ù–∞—à—ë–ª –¥–ª—è —Ç–µ–±—è:\n\n{reply}")


# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ SoundScout –∑–∞–ø—É—â–µ–Ω (YouTube search parser)...")
    app.run_polling()


if __name__ == "__main__":
    main()
